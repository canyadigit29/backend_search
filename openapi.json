{
  "openapi": "3.1.0",
  "info": {
    "title": "Search Documents Assistant API",
    "version": "1.0.0",
    "description": "Search endpoint for Custom GPT."
  },
  "servers": [
    {
      "url": "https://backendsearch-production.up.railway.app",
      "description": "Railway production"
    }
  ],
  "paths": {
    "/api/assistant/search_docs": {
      "post": {
        "operationId": "searchDocumentsAssistant",
    "summary": "Search documents via assistant",
  "description": "Performs a semantic search and returns a summary plus sources. Uses fixed batching: summarizes a diversified set of 25 from the top-50 (capped per file to improve breadth) and returns the remaining top-50 as pending via resume_chunk_ids.",
        "x-oai-meta": {
          "name": "searchDocumentsAssistant",
          "isUserFacing": true
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/file_ops/upload_with_metadata": {
      "post": {
        "operationId": "uploadFileWithMetadata",
        "summary": "Upload a file with its metadata",
        "description": "Uploads a file and a JSON string of its metadata. The backend will process the file asynchronously to chunk and embed it. The metadata should be extracted by the GPT before calling this endpoint.",
        "x-oai-meta": {
          "name": "uploadFileWithMetadata",
          "isUserFacing": true
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadMetadataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File processed and ingestion queued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request, e.g., missing file or metadata."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SearchRequest": {
        "type": "object",
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": ["id"],
            "description": "Static user identifier required by the backend."
          },
          "relevance_threshold": {
            "type": "number",
            "description": "Minimum similarity score for a result to be considered relevant (0.0 to 1.0). Default is 0.4.",
            "default": 0.4
          },
          "max_results": {
            "type": "integer",
            "description": "The maximum number of chunks to process for the summary. Default is 100.",
            "default": 100
          },
          "search_weights": {
            "type": "object",
            "description": "Weights to blend semantic and keyword search scores. Both must be provided and sum to 1.0. If omitted, backend defaults to a 50/50 blend.",
            "properties": {
              "semantic": {
                "type": "number",
                "description": "Weight for semantic search (e.g., 0.8 for broad queries)."
              },
              "keyword": {
                "type": "number",
                "description": "Weight for keyword search (e.g., 0.8 for exact-match queries)."
              }
            }
          },
          "or_terms": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Optional alternate phrasings or synonyms. Results from each term are merged by chunk id using the best (max) score before ranking."
          },
          "resume_chunk_ids": {
            "type": "array",
            "description": "Resume mode: specify chunk IDs returned as pending_chunk_ids from a previous response to continue summarization.",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "Optional start date (YYYY-MM-DD) to filter documents by their meeting_date."
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "Optional end date (YYYY-MM-DD) to filter documents by their meeting_date."
          },
          "metadata_filter": {
            "type": "object",
            "description": "Optional JSON object to filter documents by their metadata. The filter performs a containment check (e.g., `{\"key\": \"value\"}` matches documents where metadata contains that key-value pair)."
          }
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "page_number": {
            "type": "integer"
          },
          "score": {
            "type": "number"
          },
          "excerpt": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "A temporary, signed URL to download the source file."
          }
        }
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "type": [
              "string",
              "null"
            ]
          },
          "summary_was_partial": {
            "type": "boolean",
            "description": "True if the model returned a partial response (rare). Timing is not used for batching."
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          },
          "can_resume": {
            "type": "boolean",
            "description": "True when there are remaining top-50 chunks not yet summarized (fixed 25/25 batching)."
          },
          "pending_chunk_ids": {
            "type": "array",
            "description": "The remaining chunk IDs from the top-50 that were not included in this summary pass (typically the other 25). Send these back via resume_chunk_ids to continue.",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "included_chunk_ids": {
            "type": "array",
            "description": "Chunk IDs that were included in this summary pass.",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          
          "error": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": ["id"]
      },
      "UploadMetadataRequest": {
        "type": "object",
        "required": ["file_id", "metadata_json", "user"],
        "properties": {
          "file_id": {
            "type": "string",
            "description": "The ID of the file already uploaded to the GPT environment."
          },
          "metadata_json": {
            "type": "string",
            "description": "A JSON string representing the file's metadata. Must include 'doc_type'. Can include 'meeting_date' (YYYY-MM-DD) and other key-value pairs."
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "UploadMetadataResponse": {
        "type": "object",
        "required": ["message", "file_id"],
        "properties": {
          "message": {
            "type": "string"
          },
          "file_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    }
  }
}
